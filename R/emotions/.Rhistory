dim(result)                                                          # 100   2
result$text
result$score                                                         # 100 줄 단위로 긍정어/부정어 사전을 적용한 점수 합계
# -- score값을 대상으로 color 칼럼 추가
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
# -- 감성분석 결과 차트보기
plot(result$score, col=result$color) # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")   # 막대차트
# ------------------------------
# -- 5) 단어의 긍정/부정 분석
# ------------------------------
# -- (1) 감성분석 빈도수
table(result$color)
# -- (2) score 칼럼 리코딩
result$remark[result$score >=1] = "긍정"
result$remark[result$score ==0] = "중립"
result$remark[result$score < 0] = "부정"
sentiment_result <- table(result$remark)
sentiment_result
# -- (3) 제목, 색상, 원크기
pie(sentiment_result, main="감성분석 결과",
col=c("blue","red","green"), radius=0.8)                         # ->  1.2
# ************************************************
# -- 감성 분석(단어의 긍정/부정 분석)
#    시각화 : 파랑/빨강 -> 불만고객 시각화
# ************************************************
# ------------------------------
# -- 1) 데이터 가져오기("../Rwork/Part-II/reviews.csv")
# ------------------------------
data=read.csv("./emotions/reviews.csv")                                         # file.choose() 파일 선택
head(data,2)
dim(data)                                                            # 100   2
str(data)                                                            # 변수명 : company, review = 고객 인터뷰 내용
# ------------------------------
# -- 2) 단어 사전에 단어추가
# ------------------------------
# -- 긍정단어와 부정단어를 카운터하여 긍정/부정 형태로 빈도 분석
#    neg.txt : 부정어 사전
#    pos.txt : 긍정어 사전
# -- (1) 긍정어/부정어 영어 사전 가져오기
#setwd("C:\\RProject\\Rwork\\Part-II")
posDic = readLines("posDic.txt")
negDic = readLines("negDic.txt")
length(posDic)                                                       # 2006
length(negDic)                                                       # 4783
# -- (2) 긍정어/부정어 단어 추가
posDic.final =c(posDic, 'victor')
negDic.final =c(negDic, 'vanquished')
# -- 마지막에 단어 추가
tail(posDic.final)
tail(negDic.final)
# ------------------------------
# -- 3) 감성 분석 함수 정의-sentimental
# ------------------------------
# -- (1) 문자열 처리를 위한 패키지 로딩
library(plyr)                                                        # laply()함수 제공
library(stringr)                                                     # str_split()함수 제공
# -- (2) 감성분석을 위한 함수 정의
sentimental = function(sentences, posDic, negDic){
scores = laply(sentences, function(sentence, posDic, negDic) {
sentence = gsub('[[:punct:]]', '', sentence) # 문장부호 제거
sentence = gsub('[[:cntrl:]]', '', sentence) # 특수문자 제거
sentence = gsub('\\d+', '', sentence)        # 숫자 제거
sentence = tolower(sentence)                 # 모두 소문자로 변경(단어가 모두 소문자 임)
word.list = str_split(sentence, '\\s+')      # 공백 기준으로 단어 생성 -> \\s+ : 공백 정규식, +(1개 이상)
words = unlist(word.list)                    # unlist() : list를 vector 객체로 구조변경
pos.matches = match(words, posDic)           # words의 단어를 posDic에서 matching
neg.matches = match(words, negDic)
pos.matches = !is.na(pos.matches)            # NA 제거, 위치(숫자)만 추출
neg.matches = !is.na(neg.matches)
score = sum(pos.matches) - sum(neg.matches)  # 긍정 - 부정
return(score)
}, posDic, negDic)
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
# ------------------------------
# -- 4) 감성 분석 : 두번째 변수(review) 전체 레코드 대상 감성분석
# ------------------------------
result=sentimental(data[,2], posDic.final, negDic.final)
result
names(result)                                                        # "score" "text"
dim(result)                                                          # 100   2
result$text
result$score                                                         # 100 줄 단위로 긍정어/부정어 사전을 적용한 점수 합계
# -- score값을 대상으로 color 칼럼 추가
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
# -- 감성분석 결과 차트보기
plot(result$score, col=result$color) # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")   # 막대차트
# ------------------------------
# -- 5) 단어의 긍정/부정 분석
# ------------------------------
# -- (1) 감성분석 빈도수
table(result$color)
# -- (2) score 칼럼 리코딩
result$remark[result$score >=1] = "긍정"
result$remark[result$score ==0] = "중립"
result$remark[result$score < 0] = "부정"
#sentiment_result = table(result$remark)
#sentiment_result
# -- (3) 제목, 색상, 원크기
pie(sentiment_result, main="감성분석 결과",
col=c("blue","red","green"), radius=0.8)                         # ->  1.2
# ************************************************
# -- 감성 분석(단어의 긍정/부정 분석)
#    시각화 : 파랑/빨강 -> 불만고객 시각화
# ************************************************
# ------------------------------
# -- 1) 데이터 가져오기("../Rwork/Part-II/reviews.csv")
# ------------------------------
data=read.csv("./emotions/reviews.csv")                                         # file.choose() 파일 선택
head(data,2)
dim(data)                                                            # 100   2
str(data)                                                            # 변수명 : company, review = 고객 인터뷰 내용
# ------------------------------
# -- 2) 단어 사전에 단어추가
# ------------------------------
# -- 긍정단어와 부정단어를 카운터하여 긍정/부정 형태로 빈도 분석
#    neg.txt : 부정어 사전
#    pos.txt : 긍정어 사전
# -- (1) 긍정어/부정어 영어 사전 가져오기
#setwd("C:\\RProject\\Rwork\\Part-II")
posDic = readLines("posDic.txt")
negDic = readLines("negDic.txt")
length(posDic)                                                       # 2006
length(negDic)                                                       # 4783
# -- (2) 긍정어/부정어 단어 추가
posDic.final =c(posDic, 'victor')
negDic.final =c(negDic, 'vanquished')
# -- 마지막에 단어 추가
tail(posDic.final)
tail(negDic.final)
# ------------------------------
# -- 3) 감성 분석 함수 정의-sentimental
# ------------------------------
# -- (1) 문자열 처리를 위한 패키지 로딩
library(plyr)                                                        # laply()함수 제공
library(stringr)                                                     # str_split()함수 제공
# -- (2) 감성분석을 위한 함수 정의
sentimental = function(sentences, posDic, negDic){
scores = laply(sentences, function(sentence, posDic, negDic) {
sentence = gsub('[[:punct:]]', '', sentence) # 문장부호 제거
sentence = gsub('[[:cntrl:]]', '', sentence) # 특수문자 제거
sentence = gsub('\\d+', '', sentence)        # 숫자 제거
sentence = tolower(sentence)                 # 모두 소문자로 변경(단어가 모두 소문자 임)
word.list = str_split(sentence, '\\s+')      # 공백 기준으로 단어 생성 -> \\s+ : 공백 정규식, +(1개 이상)
words = unlist(word.list)                    # unlist() : list를 vector 객체로 구조변경
pos.matches = match(words, posDic)           # words의 단어를 posDic에서 matching
neg.matches = match(words, negDic)
pos.matches = !is.na(pos.matches)            # NA 제거, 위치(숫자)만 추출
neg.matches = !is.na(neg.matches)
score = sum(pos.matches) - sum(neg.matches)  # 긍정 - 부정
return(score)
}, posDic, negDic)
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
# ------------------------------
# -- 4) 감성 분석 : 두번째 변수(review) 전체 레코드 대상 감성분석
# ------------------------------
result=sentimental(data[,2], posDic.final, negDic.final)
result
names(result)                                                        # "score" "text"
dim(result)                                                          # 100   2
result$text
result$score                                                         # 100 줄 단위로 긍정어/부정어 사전을 적용한 점수 합계
# -- score값을 대상으로 color 칼럼 추가
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
# -- 감성분석 결과 차트보기
plot(result$score, col=result$color) # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")   # 막대차트
# ------------------------------
# -- 5) 단어의 긍정/부정 분석
# ------------------------------
# -- (1) 감성분석 빈도수
table(result$color)
# -- (2) score 칼럼 리코딩
result$remark[result$score >=1] = "긍정"
result$remark[result$score ==0] = "중립"
result$remark[result$score < 0] = "부정"
sentiment_result = table(result$remark)
sentiment_result
# -- (3) 제목, 색상, 원크기
pie(sentiment_result, main="감성분석 결과",
col=c("blue","red","green"), radius=0.8)                         # ->  1.2
# ************************************************
# -- 감성 분석(단어의 긍정/부정 분석)
#    시각화 : 파랑/빨강 -> 불만고객 시각화
# ************************************************
# ------------------------------
# -- 1) 데이터 가져오기("../Rwork/Part-II/reviews.csv")
# ------------------------------
data=read.csv("./emotions/reviews.csv")                                         # file.choose() 파일 선택
head(data,2)
dim(data)                                                            # 100   2
str(data)                                                            # 변수명 : company, review = 고객 인터뷰 내용
# ------------------------------
# -- 2) 단어 사전에 단어추가
# ------------------------------
# -- 긍정단어와 부정단어를 카운터하여 긍정/부정 형태로 빈도 분석
#    neg.txt : 부정어 사전
#    pos.txt : 긍정어 사전
# -- (1) 긍정어/부정어 영어 사전 가져오기
#setwd("C:\\RProject\\Rwork\\Part-II")
posDic = readLines("posDic.txt")
negDic = readLines("negDic.txt")
length(posDic)                                                       # 2006
length(negDic)                                                       # 4783
# -- (2) 긍정어/부정어 단어 추가
posDic.final =c(posDic, 'victor')
negDic.final =c(negDic, 'vanquished')
# -- 마지막에 단어 추가
tail(posDic.final)
tail(negDic.final)
# ------------------------------
# -- 3) 감성 분석 함수 정의-sentimental
# ------------------------------
# -- (1) 문자열 처리를 위한 패키지 로딩
library(plyr)                                                        # laply()함수 제공
library(stringr)                                                     # str_split()함수 제공
# -- (2) 감성분석을 위한 함수 정의
sentimental = function(sentences, posDic, negDic){
scores = laply(sentences, function(sentence, posDic, negDic) {
sentence = gsub('[[:punct:]]', '', sentence) # 문장부호 제거
sentence = gsub('[[:cntrl:]]', '', sentence) # 특수문자 제거
sentence = gsub('\\d+', '', sentence)        # 숫자 제거
sentence = tolower(sentence)                 # 모두 소문자로 변경(단어가 모두 소문자 임)
word.list = str_split(sentence, '\\s+')      # 공백 기준으로 단어 생성 -> \\s+ : 공백 정규식, +(1개 이상)
words = unlist(word.list)                    # unlist() : list를 vector 객체로 구조변경
pos.matches = match(words, posDic)           # words의 단어를 posDic에서 matching
neg.matches = match(words, negDic)
pos.matches = !is.na(pos.matches)            # NA 제거, 위치(숫자)만 추출
neg.matches = !is.na(neg.matches)
score = sum(pos.matches) - sum(neg.matches)  # 긍정 - 부정
return(score)
}, posDic, negDic)
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
# ------------------------------
# -- 4) 감성 분석 : 두번째 변수(review) 전체 레코드 대상 감성분석
# ------------------------------
result=sentimental(data[,2], posDic.final, negDic.final)
result
names(result)                                                        # "score" "text"
dim(result)                                                          # 100   2
result$text
result$score                                                         # 100 줄 단위로 긍정어/부정어 사전을 적용한 점수 합계
# -- score값을 대상으로 color 칼럼 추가
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
# -- 감성분석 결과 차트보기
plot(result$score, col=result$color) # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")   # 막대차트
# ------------------------------
# -- 5) 단어의 긍정/부정 분석
# ------------------------------
# -- (1) 감성분석 빈도수
table(result$color)
# -- (2) score 칼럼 리코딩
result$remark[result$score >=1] = "긍정"
result$remark[result$score ==0] = "중립"
result$remark[result$score < 0] = "부정"
setwd("/Users/NHY/Documents/rstudio/emotions")
sentiment_result = table(result$remark)
sentiment_result
# -- (3) 제목, 색상, 원크기
pie(sentiment_result, main="감성분석 결과",
col=c("blue","red","green"), radius=0.8)                         # ->  1.2
sentiment_result = table(result$remark)
# -- (2) 긍정어/부정어 단어 추가
posDic.final =c(posDic, 'victor')
negDic.final =c(negDic, 'vanquished')
# -- 마지막에 단어 추가
tail(posDic.final)
tail(negDic.final)
# ------------------------------
# -- 4) 감성 분석 : 두번째 변수(review) 전체 레코드 대상 감성분석
# ------------------------------
result=sentimental(data[,2], posDic.final, negDic.final)
# ------------------------------
# -- 1) 데이터 가져오기("../Rwork/Part-II/reviews.csv")
# ------------------------------
data=read.csv("./emotions/reviews.csv")                                         # file.choose() 파일 선택
head(data,2)
dim(data)                                                            # 100   2
str(data)                                                            # 변수명 : company, review = 고객 인터뷰 내용
# -- (1) 긍정어/부정어 영어 사전 가져오기
#setwd("C:\\RProject\\Rwork\\Part-II")
posDic = readLines("posDic.txt")
negDic = readLines("negDic.txt")
length(posDic)                                                       # 2006
length(negDic)                                                       # 4783
# -- (2) 긍정어/부정어 단어 추가
posDic.final =c(posDic, 'victor')
negDic.final =c(negDic, 'vanquished')
# -- 마지막에 단어 추가
tail(posDic.final)
tail(negDic.final)
# -- (1) 문자열 처리를 위한 패키지 로딩
library(plyr)                                                        # laply()함수 제공
library(stringr)                                                     # str_split()함수 제공
# -- (2) 감성분석을 위한 함수 정의
sentimental = function(sentences, posDic, negDic){
scores = laply(sentences, function(sentence, posDic, negDic) {
sentence = gsub('[[:punct:]]', '', sentence) # 문장부호 제거
sentence = gsub('[[:cntrl:]]', '', sentence) # 특수문자 제거
sentence = gsub('\\d+', '', sentence)        # 숫자 제거
sentence = tolower(sentence)                 # 모두 소문자로 변경(단어가 모두 소문자 임)
word.list = str_split(sentence, '\\s+')      # 공백 기준으로 단어 생성 -> \\s+ : 공백 정규식, +(1개 이상)
words = unlist(word.list)                    # unlist() : list를 vector 객체로 구조변경
pos.matches = match(words, posDic)           # words의 단어를 posDic에서 matching
neg.matches = match(words, negDic)
pos.matches = !is.na(pos.matches)            # NA 제거, 위치(숫자)만 추출
neg.matches = !is.na(neg.matches)
score = sum(pos.matches) - sum(neg.matches)  # 긍정 - 부정
return(score)
}, posDic, negDic)
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
# ------------------------------
# -- 4) 감성 분석 : 두번째 변수(review) 전체 레코드 대상 감성분석
# ------------------------------
result=sentimental(data[,2], posDic.final, negDic.final)
result
names(result)                                                        # "score" "text"
dim(result)                                                          # 100   2
result$text
result$score                                                         # 100 줄 단위로 긍정어/부정어 사전을 적용한 점수 합계
# -- score값을 대상으로 color 칼럼 추가
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
# -- 감성분석 결과 차트보기
plot(result$score, col=result$color) # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")   # 막대차트
# -- (1) 감성분석 빈도수
table(result$color)
# -- (2) score 칼럼 리코딩
result$remark[result$score >=1] = "긍정"
result$remark[result$score ==0] = "중립"
result$remark[result$score < 0] = "부정"
setwd("/Users/NHY/Documents/rstudio/emotions")
sentiment_result = table(result$remark)
sentiment_result
# -- (3) 제목, 색상, 원크기
pie(sentiment_result, main="감성분석 결과",
col=c("blue","red","green"), radius=0.8)                         # ->  1.2
font_import()
par(family = "NanumGothic") #AppleGothic.ttf")
Sys.setlocale(category = "LC_CTYPE", locale = "ko_KR.UTF-8")
theme_set(theme_gray(base_family='NanumGothic'))
options("scipen" = 10)
# ************************************************
# -- 감성 분석(단어의 긍정/부정 분석)
#    시각화 : 파랑/빨강 -> 불만고객 시각화
# ************************************************
# ------------------------------
# -- 1) 데이터 가져오기("../Rwork/Part-II/reviews.csv")
# ------------------------------
data=read.csv("./emotions/reviews.csv")                                         # file.choose() 파일 선택
head(data,2)
dim(data)                                                            # 100   2
str(data)                                                            # 변수명 : company, review = 고객 인터뷰 내용
# ------------------------------
# -- 2) 단어 사전에 단어추가
# ------------------------------
# -- 긍정단어와 부정단어를 카운터하여 긍정/부정 형태로 빈도 분석
#    neg.txt : 부정어 사전
#    pos.txt : 긍정어 사전
# -- (1) 긍정어/부정어 영어 사전 가져오기
#setwd("C:\\RProject\\Rwork\\Part-II")
posDic = readLines("posDic.txt")
negDic = readLines("negDic.txt")
length(posDic)                                                       # 2006
length(negDic)                                                       # 4783
# -- (2) 긍정어/부정어 단어 추가
posDic.final =c(posDic, 'victor')
negDic.final =c(negDic, 'vanquished')
# -- 마지막에 단어 추가
tail(posDic.final)
tail(negDic.final)
# ------------------------------
# -- 3) 감성 분석 함수 정의-sentimental
# ------------------------------
# -- (1) 문자열 처리를 위한 패키지 로딩
library(plyr)                                                        # laply()함수 제공
library(stringr)                                                     # str_split()함수 제공
# -- (2) 감성분석을 위한 함수 정의
sentimental = function(sentences, posDic, negDic){
scores = laply(sentences, function(sentence, posDic, negDic) {
sentence = gsub('[[:punct:]]', '', sentence) # 문장부호 제거
sentence = gsub('[[:cntrl:]]', '', sentence) # 특수문자 제거
sentence = gsub('\\d+', '', sentence)        # 숫자 제거
sentence = tolower(sentence)                 # 모두 소문자로 변경(단어가 모두 소문자 임)
word.list = str_split(sentence, '\\s+')      # 공백 기준으로 단어 생성 -> \\s+ : 공백 정규식, +(1개 이상)
words = unlist(word.list)                    # unlist() : list를 vector 객체로 구조변경
pos.matches = match(words, posDic)           # words의 단어를 posDic에서 matching
neg.matches = match(words, negDic)
pos.matches = !is.na(pos.matches)            # NA 제거, 위치(숫자)만 추출
neg.matches = !is.na(neg.matches)
score = sum(pos.matches) - sum(neg.matches)  # 긍정 - 부정
return(score)
}, posDic, negDic)
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
# ------------------------------
# -- 4) 감성 분석 : 두번째 변수(review) 전체 레코드 대상 감성분석
# ------------------------------
result=sentimental(data[,2], posDic.final, negDic.final)
result
names(result)                                                        # "score" "text"
dim(result)                                                          # 100   2
result$text
result$score                                                         # 100 줄 단위로 긍정어/부정어 사전을 적용한 점수 합계
# -- score값을 대상으로 color 칼럼 추가
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
# -- 감성분석 결과 차트보기
plot(result$score, col=result$color) # 산포도 색생 적용
barplot(result$score, col=result$color, main ="감성분석 결과화면")   # 막대차트
# ------------------------------
# -- 5) 단어의 긍정/부정 분석
# ------------------------------
# -- (1) 감성분석 빈도수
table(result$color)
# -- (2) score 칼럼 리코딩
result$remark[result$score >=1] = "긍정"
result$remark[result$score ==0] = "중립"
result$remark[result$score < 0] = "부정"
setwd("/Users/NHY/Documents/rstudio/emotions")
sentiment_result = table(result$remark)
sentiment_result
# -- (3) 제목, 색상, 원크기
pie(sentiment_result, main="감성분석 결과",
col=c("blue","red","green"), radius=0.8)                         # ->  1.2
# -- (3) 제목, 색상, 원크기
pie(sentiment_result, main="또용과 김OO의 발췌된 카톡대화내용으로 분석한 감정",
col=c("blue","red","green"), radius=0.8)                         # ->  1.2
# -- 감성분석 결과 차트보기
plot(result$score, col=result$color) # 산포도 색생 적용
barplot(result$score, col=result$color, main ="또용과 지인의 분석 그래프")   # 막대차트
head(data,2)
dim(data)                                                            # 100   2
str(data)                                                            # 변수명 : company, review = 고객 인터뷰 내용
length(posDic)                                                       # 2006
length(negDic)                                                       # 4783
# -- (2) 긍정어/부정어 단어 추가
posDic.final =c(posDic, 'victor')
negDic.final =c(negDic, 'vanquished')
# -- 마지막에 단어 추가
tail(posDic.final)
tail(negDic.final)
# -- (1) 문자열 처리를 위한 패키지 로딩
library(plyr)                                                        # laply()함수 제공
library(stringr)                                                     # str_split()함수 제공
# -- (2) 감성분석을 위한 함수 정의
sentimental = function(sentences, posDic, negDic){
scores = laply(sentences, function(sentence, posDic, negDic) {
sentence = gsub('[[:punct:]]', '', sentence) # 문장부호 제거
sentence = gsub('[[:cntrl:]]', '', sentence) # 특수문자 제거
sentence = gsub('\\d+', '', sentence)        # 숫자 제거
sentence = tolower(sentence)                 # 모두 소문자로 변경(단어가 모두 소문자 임)
word.list = str_split(sentence, '\\s+')      # 공백 기준으로 단어 생성 -> \\s+ : 공백 정규식, +(1개 이상)
words = unlist(word.list)                    # unlist() : list를 vector 객체로 구조변경
pos.matches = match(words, posDic)           # words의 단어를 posDic에서 matching
neg.matches = match(words, negDic)
pos.matches = !is.na(pos.matches)            # NA 제거, 위치(숫자)만 추출
neg.matches = !is.na(neg.matches)
score = sum(pos.matches) - sum(neg.matches)  # 긍정 - 부정
return(score)
}, posDic, negDic)
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
# ------------------------------
# -- 4) 감성 분석 : 두번째 변수(review) 전체 레코드 대상 감성분석
# ------------------------------
result=sentimental(data[,2], posDic.final, negDic.final)
result
names(result)                                                        # "score" "text"
dim(result)                                                          # 100   2
result$text
result$score                                                         # 100 줄 단위로 긍정어/부정어 사전을 적용한 점수 합계
# -- score값을 대상으로 color 칼럼 추가
result$color[result$score >=1] = "blue"
barplot(result$remark[result$score >=1], result$remark[result$score ==0])
plot(result$remark[result$score >=1], result$remark[result$score ==0])
plot(result$score >=1, result$score ==0)
# -- (3) 제목, 색상, 원크기
pie(sentiment_result, main="또용과 김OO의 발췌된 카톡대화내용으로 분석한 감정",
col=c("blue","red","green"), radius=0.8)                         # ->  1.2
# -- 감성분석 결과 차트보기
plot(result$score, col=result$color) # 산포도 색생 적용
# -- score값을 대상으로 color 칼럼 추가
result$color[result$score >=1] = "blue"
result$color[result$score ==0] = "green"
result$color[result$score < 0] = "red"
# -- 감성분석 결과 차트보기
plot(result$score, col=result$color) # 산포도 색생 적용
barplot(result$score, col=result$color, main ="또용과 지인의 분석 그래프")   # 막대차트
